
Test_RTC_002_Pwr_WL55CJ1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  080049cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080049cc  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182de  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caf  00000000  00000000  00038314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  0003afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e14b  00000000  00000000  0003df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dab  00000000  00000000  0005c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1b57  00000000  00000000  00072e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001349cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006840  00000000  00000000  00134a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	080048b4 	.word	0x080048b4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	080048b4 	.word	0x080048b4

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b085      	sub	sp, #20
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4013      	ands	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb05 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f80f 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f927 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 f913 	bl	800074c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8c5 	bl	80006b4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800052a:	f000 f861 	bl	80005f0 <MX_RTC_Init>
  MX_TIM16_Init();
 800052e:	f000 f899 	bl	8000664 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000532:	2001      	movs	r0, #1
 8000534:	f001 f8c8 	bl	80016c8 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x26>
	...

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09a      	sub	sp, #104	; 0x68
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2248      	movs	r2, #72	; 0x48
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f9aa 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000562:	f001 f889 	bl	8001678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ff8e 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xb0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000574:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <SystemClock_Config+0xb0>)
 8000576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <SystemClock_Config+0xb0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000588:	2324      	movs	r3, #36	; 0x24
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800058c:	2381      	movs	r3, #129	; 0x81
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000594:	2300      	movs	r3, #0
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000598:	2360      	movs	r3, #96	; 0x60
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fb51 	bl	8001c4c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005b0:	f000 f906 	bl	80007c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80005b4:	236f      	movs	r3, #111	; 0x6f
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fed5 	bl	8002384 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005e0:	f000 f8ee 	bl	80007c0 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3768      	adds	r7, #104	; 0x68
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	58000400 	.word	0x58000400

080005f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_RTC_Init+0x6c>)
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <MX_RTC_Init+0x70>)
 80005f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_RTC_Init+0x6c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_RTC_Init+0x6c>)
 8000602:	227f      	movs	r2, #127	; 0x7f
 8000604:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_RTC_Init+0x6c>)
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_RTC_Init+0x6c>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_RTC_Init+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_RTC_Init+0x6c>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_RTC_Init+0x6c>)
 8000620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000624:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_RTC_Init+0x6c>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_RTC_Init+0x6c>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <MX_RTC_Init+0x6c>)
 8000634:	f002 fb80 	bl	8002d38 <HAL_RTC_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f8bf 	bl	80007c0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8000642:	2300      	movs	r3, #0
 8000644:	2204      	movs	r2, #4
 8000646:	2105      	movs	r1, #5
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_RTC_Init+0x6c>)
 800064a:	f002 fc87 	bl	8002f5c <HAL_RTCEx_SetWakeUpTimer_IT>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000654:	f000 f8b4 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40002800 	.word	0x40002800

08000664 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_TIM16_Init+0x48>)
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <MX_TIM16_Init+0x4c>)
 800066c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4000;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_TIM16_Init+0x48>)
 8000670:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000674:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_TIM16_Init+0x48>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_TIM16_Init+0x48>)
 800067e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000682:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_TIM16_Init+0x48>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_TIM16_Init+0x48>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_TIM16_Init+0x48>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_TIM16_Init+0x48>)
 8000698:	f002 fd09 	bl	80030ae <HAL_TIM_Base_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006a2:	f000 f88d 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000060 	.word	0x20000060
 80006b0:	40014400 	.word	0x40014400

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006ba:	4a23      	ldr	r2, [pc, #140]	; (8000748 <MX_USART2_UART_Init+0x94>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fc:	4811      	ldr	r0, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x90>)
 80006fe:	f002 ff3d 	bl	800357c <HAL_UART_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000708:	f000 f85a 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070c:	2100      	movs	r1, #0
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_USART2_UART_Init+0x90>)
 8000710:	f003 ffdb 	bl	80046ca <HAL_UARTEx_SetTxFifoThreshold>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800071a:	f000 f851 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x90>)
 8000722:	f004 f810 	bl	8004746 <HAL_UARTEx_SetRxFifoThreshold>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800072c:	f000 f848 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_USART2_UART_Init+0x90>)
 8000732:	f003 ff92 	bl	800465a <HAL_UARTEx_DisableFifoMode>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800073c:	f000 f840 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000ac 	.word	0x200000ac
 8000748:	40004400 	.word	0x40004400

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000750:	2004      	movs	r0, #4
 8000752:	f7ff feae 	bl	80004b2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff feab 	bl	80004b2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	200b      	movs	r0, #11
 8000762:	f000 fb2c 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000766:	200b      	movs	r0, #11
 8000768:	f000 fb43 	bl	8000df2 <HAL_NVIC_EnableIRQ>

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff feb4 	bl	80004e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff feb1 	bl	80004e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff feae 	bl	80004e2 <LL_AHB2_GRP1_EnableClock>

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <HAL_TIM_PeriodElapsedCallback>:
{
	HAL_TIM_Base_Start_IT ( &TIM_HANDLER ) ;
	tim_on = 1 ;
}
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM_INSTANCE )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d105      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT ( &TIM_HANDLER ) ;
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007a0:	f002 fcdc 	bl	800315c <HAL_TIM_Base_Stop_IT>
		tim_on = 0 ;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40014400 	.word	0x40014400
 80007b8:	20000060 	.word	0x20000060
 80007bc:	2000019c 	.word	0x2000019c

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>

080007ca <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <LL_AHB2_GRP1_EnableClock>:
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4313      	orrs	r3, r2
 8000800:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4013      	ands	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000866:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4013      	ands	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b090      	sub	sp, #64	; 0x40
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2238      	movs	r2, #56	; 0x38
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f803 	bl	80048a4 <memset>
  if(hrtc->Instance==RTC)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <HAL_RTC_MspInit+0x64>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d11d      	bne.n	80008e4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 f923 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008c4:	f7ff ff7c 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008c8:	f7ff ff7f 	bl	80007ca <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80008cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008d0:	f7ff ffa3 	bl	800081a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 fa70 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80008de:	2003      	movs	r0, #3
 80008e0:	f000 fa87 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3740      	adds	r7, #64	; 0x40
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40002800 	.word	0x40002800

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a09      	ldr	r2, [pc, #36]	; (8000924 <HAL_TIM_Base_MspInit+0x34>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d10b      	bne.n	800091a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000902:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000906:	f7ff ffa0 	bl	800084a <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	201c      	movs	r0, #28
 8000910:	f000 fa55 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000914:	201c      	movs	r0, #28
 8000916:	f000 fa6c 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40014400 	.word	0x40014400

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b096      	sub	sp, #88	; 0x58
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2238      	movs	r2, #56	; 0x38
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f003 ffab 	bl	80048a4 <memset>
  if(huart->Instance==USART2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a34      	ldr	r2, [pc, #208]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d160      	bne.n	8000a1a <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000958:	2302      	movs	r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000960:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4618      	mov	r0, r3
 8000968:	f002 f8cc 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000972:	f7ff ff25 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800097a:	f7ff ff4e 	bl	800081a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff ff33 	bl	80007ea <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000984:	230c      	movs	r3, #12
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000994:	2307      	movs	r3, #7
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fd09 	bl	80013b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_UART_MspInit+0x104>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009ae:	2213      	movs	r2, #19
 80009b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009de:	f000 fa23 	bl	8000e28 <HAL_DMA_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80009e8:	f7ff feea 	bl	80007c0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80009ec:	2110      	movs	r1, #16
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x100>)
 80009f0:	f000 fc46 	bl	8001280 <HAL_DMA_ConfigChannelAttributes>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 80009fa:	f7ff fee1 	bl	80007c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <HAL_UART_MspInit+0x100>)
 8000a02:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_UART_MspInit+0x100>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2025      	movs	r0, #37	; 0x25
 8000a10:	f000 f9d5 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a14:	2025      	movs	r0, #37	; 0x25
 8000a16:	f000 f9ec 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3758      	adds	r7, #88	; 0x58
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	2000013c 	.word	0x2000013c
 8000a2c:	40020008 	.word	0x40020008

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f8af 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC Wakeup Interrupt.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <RTC_WKUP_IRQHandler+0x10>)
 8000a86:	f002 faef 	bl	8003068 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000028 	.word	0x20000028

08000a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA1_Channel1_IRQHandler+0x10>)
 8000a9a:	f000 fb2b 	bl	80010f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000013c 	.word	0x2000013c

08000aa8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM16_IRQHandler+0x10>)
 8000aae:	f002 fb83 	bl	80031b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000060 	.word	0x20000060

08000abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USART2_IRQHandler+0x10>)
 8000ac2:	f002 fdab 	bl	800361c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000ac 	.word	0x200000ac

08000ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad4:	f7ff fcd2 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000afe:	f003 fead 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b02:	f7ff fd06 	bl	8000512 <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   r0, =_estack
 8000b08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	200001a4 	.word	0x200001a4

08000b20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f93a 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b34:	f001 fe08 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_Init+0x3c>)
 8000b3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f810 	bl	8000b64 <HAL_InitTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	e001      	b.n	8000b54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b50:	f7ff fe93 	bl	800087a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d024      	beq.n	8000bc2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b78:	f001 fde6 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b88:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f93c 	bl	8000e0e <HAL_SYSTICK_Config>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10f      	bne.n	8000bbc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	d809      	bhi.n	8000bb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8000baa:	f000 f908 	bl	8000dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <HAL_InitTick+0x70>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e007      	b.n	8000bc6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e004      	b.n	8000bc6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e001      	b.n	8000bc6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x20>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	200001a0 	.word	0x200001a0

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <HAL_GetTick+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	200001a0 	.word	0x200001a0

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <__NVIC_EnableIRQ+0x34>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff90 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff2d 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff44 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff92 	bl	8000d00 <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff61 	bl	8000cac <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff37 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffa4 	bl	8000d64 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e08e      	b.n	8000f58 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_DMA_Init+0x138>)
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d80f      	bhi.n	8000e66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <HAL_DMA_Init+0x13c>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a45      	ldr	r2, [pc, #276]	; (8000f68 <HAL_DMA_Init+0x140>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	009a      	lsls	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <HAL_DMA_Init+0x144>)
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
 8000e64:	e00e      	b.n	8000e84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_DMA_Init+0x148>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <HAL_DMA_Init+0x140>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	009a      	lsls	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a3c      	ldr	r2, [pc, #240]	; (8000f74 <HAL_DMA_Init+0x14c>)
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e9e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fa02 	bl	80012e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee4:	d102      	bne.n	8000eec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ef8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f02:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d010      	beq.n	8000f2e <HAL_DMA_Init+0x106>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d80c      	bhi.n	8000f2e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fa2b 	bl	8001370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	e008      	b.n	8000f40 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020407 	.word	0x40020407
 8000f64:	bffdfff8 	.word	0xbffdfff8
 8000f68:	cccccccd 	.word	0xcccccccd
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	bffdfbf8 	.word	0xbffdfbf8
 8000f74:	40020400 	.word	0x40020400

08000f78 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e04f      	b.n	800102a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e040      	b.n	800102a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0201 	bic.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f003 021c 	and.w	r2, r3, #28
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ff4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800100c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001016:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d005      	beq.n	8001058 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2204      	movs	r2, #4
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e047      	b.n	80010e8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 020e 	bic.w	r2, r2, #14
 8001066:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	f003 021c 	and.w	r2, r3, #28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	4798      	blx	r3
    }
  }
  return status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	f003 031c 	and.w	r3, r3, #28
 8001114:	2204      	movs	r2, #4
 8001116:	409a      	lsls	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d027      	beq.n	8001170 <HAL_DMA_IRQHandler+0x7c>
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d022      	beq.n	8001170 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f003 021c 	and.w	r2, r3, #28
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	2104      	movs	r1, #4
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8081 	beq.w	8001268 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800116e:	e07b      	b.n	8001268 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f003 031c 	and.w	r3, r3, #28
 8001178:	2202      	movs	r2, #2
 800117a:	409a      	lsls	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d03d      	beq.n	8001200 <HAL_DMA_IRQHandler+0x10c>
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d038      	beq.n	8001200 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10b      	bne.n	80011b4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 020a 	bic.w	r2, r2, #10
 80011aa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <HAL_DMA_IRQHandler+0x180>)
 80011bc:	429a      	cmp	r2, r3
 80011be:	d909      	bls.n	80011d4 <HAL_DMA_IRQHandler+0xe0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f003 031c 	and.w	r3, r3, #28
 80011c8:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <HAL_DMA_IRQHandler+0x184>)
 80011ca:	2102      	movs	r1, #2
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	6053      	str	r3, [r2, #4]
 80011d2:	e008      	b.n	80011e6 <HAL_DMA_IRQHandler+0xf2>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f003 031c 	and.w	r3, r3, #28
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_DMA_IRQHandler+0x188>)
 80011de:	2102      	movs	r1, #2
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d038      	beq.n	8001268 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80011fe:	e033      	b.n	8001268 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f003 031c 	and.w	r3, r3, #28
 8001208:	2208      	movs	r2, #8
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d02a      	beq.n	800126a <HAL_DMA_IRQHandler+0x176>
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d025      	beq.n	800126a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 020e 	bic.w	r2, r2, #14
 800122c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f003 021c 	and.w	r2, r3, #28
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001268:	bf00      	nop
 800126a:	bf00      	nop
}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020080 	.word	0x40020080
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	72fb      	strb	r3, [r7, #11]
    return status;
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	e01b      	b.n	80012d4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e003      	b.n	80012ca <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012c8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]

  return status;
 80012d2:	7afb      	ldrb	r3, [r7, #11]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d813      	bhi.n	800131c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001300:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3b08      	subs	r3, #8
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e011      	b.n	8001340 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	009a      	lsls	r2, r3, #2
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001326:	4413      	add	r3, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3b08      	subs	r3, #8
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	3307      	adds	r3, #7
 800133e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001344:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2201      	movs	r2, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40020407 	.word	0x40020407
 8001364:	cccccccd 	.word	0xcccccccd
 8001368:	4002081c 	.word	0x4002081c
 800136c:	40020880 	.word	0x40020880

08001370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001380:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001394:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3b01      	subs	r3, #1
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2201      	movs	r2, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	1000823f 	.word	0x1000823f
 80013b4:	40020940 	.word	0x40020940

080013b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e140      	b.n	800164a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8132 	beq.w	8001644 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_Init+0x40>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b03      	cmp	r3, #3
 8001464:	d017      	beq.n	8001496 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d123      	bne.n	80014ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	6939      	ldr	r1, [r7, #16]
 80014e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0203 	and.w	r2, r3, #3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 808c 	beq.w	8001644 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800152c:	4a4e      	ldr	r2, [pc, #312]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	2207      	movs	r2, #7
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1bc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_GPIO_Init+0x2b4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1b8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_GPIO_Init+0x2b8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1b4>
 8001568:	2302      	movs	r3, #2
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x1be>
 800156c:	2307      	movs	r3, #7
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x1be>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x1be>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001586:	4938      	ldr	r1, [pc, #224]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001594:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b8:	4a2e      	ldr	r2, [pc, #184]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 80015ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800160e:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 8001618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f aeb7 	bne.w	80013c8 <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	58000800 	.word	0x58000800

08001678 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_PWR_EnableBkUpAccess+0x18>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	58000400 	.word	0x58000400

08001694 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <LL_PWR_EnableBootC2+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <LL_PWR_EnableBootC2+0x18>)
 800169e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	58000400 	.word	0x58000400

080016b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_PWREx_GetVoltageRange+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	58000400 	.word	0x58000400

080016c8 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80016d0:	f7ff ffe0 	bl	8001694 <LL_PWR_EnableBootC2>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <LL_PWR_IsEnabledBkUpAccess>:
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ec:	d101      	bne.n	80016f2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	58000400 	.word	0x58000400

08001700 <LL_RCC_HSE_EnableTcxo>:
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <LL_RCC_HSE_DisableTcxo>:
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800174a:	d101      	bne.n	8001750 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <LL_RCC_HSE_Enable>:
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <LL_RCC_HSE_Disable>:
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <LL_RCC_HSE_IsReady>:
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017a4:	d101      	bne.n	80017aa <LL_RCC_HSE_IsReady+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_RCC_HSE_IsReady+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_HSI_Enable>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <LL_RCC_HSI_Disable>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <LL_RCC_HSI_IsReady>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d101      	bne.n	8001804 <LL_RCC_HSI_IsReady+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_RCC_HSI_IsReady+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_RCC_HSI_SetCalibTrimming>:
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <LL_RCC_LSE_IsReady>:
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d101      	bne.n	800184e <LL_RCC_LSE_IsReady+0x18>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <LL_RCC_LSE_IsReady+0x1a>
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <LL_RCC_LSI_Enable>:
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <LL_RCC_LSI_Disable>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RCC_LSI_IsReady>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_LSI_IsReady+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_LSI_IsReady+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_MSI_Enable>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_MSI_Disable>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_MSI_IsReady>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b02      	cmp	r3, #2
 8001902:	d101      	bne.n	8001908 <LL_RCC_MSI_IsReady+0x16>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_RCC_MSI_IsReady+0x18>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b08      	cmp	r3, #8
 8001922:	d101      	bne.n	8001928 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_RCC_MSI_GetRange>:
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <LL_RCC_SetSysClkSource>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_GetSysClkSource>:
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_SetAHBPrescaler>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_SetAHB3Prescaler>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a24:	f023 020f 	bic.w	r2, r3, #15
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_SetAPB1Prescaler>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_SetAPB2Prescaler>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <LL_RCC_GetAHBPrescaler>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <LL_RCC_GetAHB3Prescaler>:
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_GetAPB1Prescaler>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_GetAPB2Prescaler>:
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b32:	d101      	bne.n	8001b38 <LL_RCC_PLL_IsReady+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_RCC_PLL_IsReady+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d101      	bne.n	8001bb4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bd2:	d101      	bne.n	8001bd8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d101      	bne.n	8001bfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c18:	d101      	bne.n	8001c1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c3a:	d101      	bne.n	8001c40 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e38b      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	f7ff fea6 	bl	80019ae <LL_RCC_GetSysClkSource>
 8001c62:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c64:	f7ff ff8f 	bl	8001b86 <LL_RCC_PLL_GetMainSource>
 8001c68:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80c9 	beq.w	8001e0a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3e>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d17b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d178      	bne.n	8001d7c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8a:	f7ff fe32 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x54>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e36a      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x72>
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cbc:	e006      	b.n	8001ccc <HAL_RCC_OscConfig+0x80>
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d222      	bcs.n	8001d16 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fd6f 	bl	80027b8 <RCC_SetFlashLatencyFromMSIRange>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e348      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe26 	bl	8001960 <LL_RCC_MSI_SetCalibTrimming>
 8001d14:	e021      	b.n	8001d5a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fe0d 	bl	8001960 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fd34 	bl	80027b8 <RCC_SetFlashLatencyFromMSIRange>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e30d      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d5a:	f000 fcf5 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4aa1      	ldr	r2, [pc, #644]	; (8001fe8 <HAL_RCC_OscConfig+0x39c>)
 8001d62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d64:	4ba1      	ldr	r3, [pc, #644]	; (8001fec <HAL_RCC_OscConfig+0x3a0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fefb 	bl	8000b64 <HAL_InitTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d047      	beq.n	8001e08 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	e2fc      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d02c      	beq.n	8001dde <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d84:	f7ff fd99 	bl	80018ba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff38 	bl	8000bfc <HAL_GetTick>
 8001d8c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d90:	f7fe ff34 	bl	8000bfc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e2e9      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001da2:	f7ff fda6 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f1      	beq.n	8001d90 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fdc2 	bl	8001960 <LL_RCC_MSI_SetCalibTrimming>
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dde:	f7ff fd7a 	bl	80018d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001de2:	f7fe ff0b 	bl	8000bfc <HAL_GetTick>
 8001de6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dea:	f7fe ff07 	bl	8000bfc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e2bc      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001dfc:	f7ff fd79 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f1      	bne.n	8001dea <HAL_RCC_OscConfig+0x19e>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e08:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d05f      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x1dc>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d10d      	bne.n	8001e3e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10a      	bne.n	8001e3e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	f7ff fcb3 	bl	8001792 <LL_RCC_HSE_IsReady>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d050      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x288>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d14c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e29b      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0x218>
 8001e5e:	f7ff fc7c 	bl	800175a <LL_RCC_HSE_Enable>
 8001e62:	e00d      	b.n	8001e80 <HAL_RCC_OscConfig+0x234>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001e6c:	d104      	bne.n	8001e78 <HAL_RCC_OscConfig+0x22c>
 8001e6e:	f7ff fc47 	bl	8001700 <LL_RCC_HSE_EnableTcxo>
 8001e72:	f7ff fc72 	bl	800175a <LL_RCC_HSE_Enable>
 8001e76:	e003      	b.n	8001e80 <HAL_RCC_OscConfig+0x234>
 8001e78:	f7ff fc7d 	bl	8001776 <LL_RCC_HSE_Disable>
 8001e7c:	f7ff fc4e 	bl	800171c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe feb8 	bl	8000bfc <HAL_GetTick>
 8001e8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7fe feb4 	bl	8000bfc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e269      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ea2:	f7ff fc76 	bl	8001792 <LL_RCC_HSE_IsReady>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f1      	beq.n	8001e90 <HAL_RCC_OscConfig+0x244>
 8001eac:	e013      	b.n	8001ed6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe fea5 	bl	8000bfc <HAL_GetTick>
 8001eb2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb6:	f7fe fea1 	bl	8000bfc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	; 0x64
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e256      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ec8:	f7ff fc63 	bl	8001792 <LL_RCC_HSE_IsReady>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f1      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x26a>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d04b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x2a8>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d113      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d110      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef4:	f7ff fc7a 	bl	80017ec <LL_RCC_HSI_IsReady>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2be>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e235      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fc7d 	bl	800180e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f14:	e031      	b.n	8001f7a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d019      	beq.n	8001f52 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1e:	f7ff fc49 	bl	80017b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fe6b 	bl	8000bfc <HAL_GetTick>
 8001f26:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7fe fe67 	bl	8000bfc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e21c      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f3c:	f7ff fc56 	bl	80017ec <LL_RCC_HSI_IsReady>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f1      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fc5f 	bl	800180e <LL_RCC_HSI_SetCalibTrimming>
 8001f50:	e013      	b.n	8001f7a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	f7ff fc3d 	bl	80017d0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe fe51 	bl	8000bfc <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7fe fe4d 	bl	8000bfc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e202      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f70:	f7ff fc3c 	bl	80017ec <LL_RCC_HSI_IsReady>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f1      	bne.n	8001f5e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d06f      	beq.n	8002066 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d057      	beq.n	800203e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d036      	beq.n	8002014 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e1db      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d018      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8001fc8:	f7ff fc56 	bl	8001878 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fcc:	f7fe fe16 	bl	8000bfc <HAL_GetTick>
 8001fd0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001fd2:	e00d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe12 	bl	8000bfc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b11      	cmp	r3, #17
 8001fe0:	d906      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1c7      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ff0:	f7ff fc52 	bl	8001898 <LL_RCC_LSI_IsReady>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ec      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002002:	f023 0210 	bic.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002014:	f7ff fc20 	bl	8001858 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe fdf0 	bl	8000bfc <HAL_GetTick>
 800201c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe fdec 	bl	8000bfc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b11      	cmp	r3, #17
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1a1      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002032:	f7ff fc31 	bl	8001898 <LL_RCC_LSI_IsReady>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f1      	beq.n	8002020 <HAL_RCC_OscConfig+0x3d4>
 800203c:	e013      	b.n	8002066 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	f7ff fc1b 	bl	8001878 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7fe fddb 	bl	8000bfc <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204a:	f7fe fdd7 	bl	8000bfc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b11      	cmp	r3, #17
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e18c      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800205c:	f7ff fc1c 	bl	8001898 <LL_RCC_LSI_IsReady>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f1      	bne.n	800204a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80d8 	beq.w	8002224 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002074:	f7ff fb32 	bl	80016dc <LL_PWR_IsEnabledBkUpAccess>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800207e:	f7ff fafb 	bl	8001678 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7fe fdbb 	bl	8000bfc <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208a:	f7fe fdb7 	bl	8000bfc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e16c      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800209c:	f7ff fb1e 	bl	80016dc <LL_PWR_IsEnabledBkUpAccess>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f1      	beq.n	800208a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d07b      	beq.n	80021a6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b85      	cmp	r3, #133	; 0x85
 80020b4:	d003      	beq.n	80020be <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fd93 	bl	8000bfc <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fd85 	bl	8000bfc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e138      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002104:	f7ff fb97 	bl	8001836 <LL_RCC_LSE_IsReady>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ef      	beq.n	80020ee <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b81      	cmp	r3, #129	; 0x81
 8002114:	d003      	beq.n	800211e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b85      	cmp	r3, #133	; 0x85
 800211c:	d121      	bne.n	8002162 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fd6d 	bl	8000bfc <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fd5f 	bl	8000bfc <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e112      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ec      	beq.n	800213a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002160:	e060      	b.n	8002224 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe fd4b 	bl	8000bfc <HAL_GetTick>
 8002166:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fd3d 	bl	8000bfc <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0f0      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ec      	bne.n	800217e <HAL_RCC_OscConfig+0x532>
 80021a4:	e03e      	b.n	8002224 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7fe fd29 	bl	8000bfc <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe fd1b 	bl	8000bfc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ce      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ec      	bne.n	80021c2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe fd08 	bl	8000bfc <HAL_GetTick>
 80021ec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fcfa 	bl	8000bfc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0ad      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800221a:	f7ff fb0c 	bl	8001836 <LL_RCC_LSE_IsReady>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ef      	bne.n	8002204 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a3 	beq.w	8002374 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d076      	beq.n	8002322 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	2b02      	cmp	r3, #2
 800223a:	d14b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	f7ff fc62 	bl	8001b04 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe fcdc 	bl	8000bfc <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fcd8 	bl	8000bfc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b0a      	cmp	r3, #10
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e08d      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800225a:	f7ff fc61 	bl	8001b20 <LL_RCC_PLL_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f1      	bne.n	8002248 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_RCC_OscConfig+0x734>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800227c:	0212      	lsls	r2, r2, #8
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002290:	430a      	orrs	r2, r1
 8002292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002296:	4313      	orrs	r3, r2
 8002298:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229a:	f7ff fc25 	bl	8001ae8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe fca5 	bl	8000bfc <HAL_GetTick>
 80022b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fca1 	bl	8000bfc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e056      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80022c8:	f7ff fc2a 	bl	8001b20 <LL_RCC_PLL_IsReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f1      	beq.n	80022b6 <HAL_RCC_OscConfig+0x66a>
 80022d2:	e04f      	b.n	8002374 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	f7ff fc16 	bl	8001b04 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc7e 	bl	8000bfc <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fc7a 	bl	8000bfc <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b0a      	cmp	r3, #10
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e02f      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002316:	f7ff fc03 	bl	8001b20 <LL_RCC_PLL_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f1      	bne.n	8002304 <HAL_RCC_OscConfig+0x6b8>
 8002320:	e028      	b.n	8002374 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e023      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	429a      	cmp	r2, r3
 8002342:	d115      	bne.n	8002370 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	429a      	cmp	r2, r3
 8002350:	d10e      	bne.n	8002370 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	11c1808c 	.word	0x11c1808c

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e12c      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b98      	ldr	r3, [pc, #608]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d91b      	bls.n	80023de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b95      	ldr	r3, [pc, #596]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4993      	ldr	r1, [pc, #588]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b6:	f7fe fc21 	bl	8000bfc <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023be:	f7fe fc1d 	bl	8000bfc <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e110      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d0:	4b8a      	ldr	r3, [pc, #552]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d1ef      	bne.n	80023be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fae8 	bl	80019c4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fc02 	bl	8000bfc <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023fc:	f7fe fbfe 	bl	8000bfc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0f1      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800240e:	f7ff fbc5 	bl	8001b9c <LL_RCC_IsActiveFlag_HPRE>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f1      	beq.n	80023fc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d016      	beq.n	8002452 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fade 	bl	80019ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800242e:	f7fe fbe5 	bl	8000bfc <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002436:	f7fe fbe1 	bl	8000bfc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0d4      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002448:	f7ff fbb9 	bl	8001bbe <LL_RCC_IsActiveFlag_C2HPRE>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f1      	beq.n	8002436 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fad6 	bl	8001a14 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002468:	f7fe fbc8 	bl	8000bfc <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002470:	f7fe fbc4 	bl	8000bfc <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0b7      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002482:	f7ff fbae 	bl	8001be2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f1      	beq.n	8002470 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff facf 	bl	8001a40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fbab 	bl	8000bfc <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024aa:	f7fe fba7 	bl	8000bfc <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e09a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024bc:	f7ff fba3 	bl	8001c06 <LL_RCC_IsActiveFlag_PPRE1>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f1      	beq.n	80024aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d017      	beq.n	8002502 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fac4 	bl	8001a66 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024de:	f7fe fb8d 	bl	8000bfc <HAL_GetTick>
 80024e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024e6:	f7fe fb89 	bl	8000bfc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e07c      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024f8:	f7ff fb96 	bl	8001c28 <LL_RCC_IsActiveFlag_PPRE2>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f1      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d043      	beq.n	8002596 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d106      	bne.n	8002524 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002516:	f7ff f93c 	bl	8001792 <LL_RCC_HSE_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11e      	bne.n	800255e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e066      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d106      	bne.n	800253a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800252c:	f7ff faf8 	bl	8001b20 <LL_RCC_PLL_IsReady>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d113      	bne.n	800255e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e05b      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002542:	f7ff f9d6 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d108      	bne.n	800255e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e050      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002550:	f7ff f94c 	bl	80017ec <LL_RCC_HSI_IsReady>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e049      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fa10 	bl	8001988 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fb48 	bl	8000bfc <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fb44 	bl	8000bfc <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e035      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	f7ff fa12 	bl	80019ae <LL_RCC_GetSysClkSource>
 800258a:	4602      	mov	r2, r0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	429a      	cmp	r2, r3
 8002594:	d1ec      	bne.n	8002570 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d21b      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 0207 	bic.w	r2, r3, #7
 80025ac:	4913      	ldr	r1, [pc, #76]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe fb22 	bl	8000bfc <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025bc:	f7fe fb1e 	bl	8000bfc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e011      	b.n	80025f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x278>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1ef      	bne.n	80025bc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025dc:	f000 f8b4 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_RCC_ClockConfig+0x27c>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCC_ClockConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe faba 	bl	8000b64 <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	58004000 	.word	0x58004000
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002616:	f7ff f9ca 	bl	80019ae <LL_RCC_GetSysClkSource>
 800261a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	f7ff fab3 	bl	8001b86 <LL_RCC_PLL_GetMainSource>
 8002620:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x2c>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d139      	bne.n	80026a2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d136      	bne.n	80026a2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002634:	f7ff f96d 	bl	8001912 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x62>
 800263e:	f7ff f968 	bl	8001912 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d106      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x4e>
 8002648:	f7ff f973 	bl	8001932 <LL_RCC_MSI_GetRange>
 800264c:	4603      	mov	r3, r0
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	e005      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x5a>
 8002656:	f7ff f977 	bl	8001948 <LL_RCC_MSI_GetRangeAfterStandby>
 800265a:	4603      	mov	r3, r0
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a36      	ldr	r2, [pc, #216]	; (800273c <HAL_RCC_GetSysClockFreq+0x134>)
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	e014      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x8c>
 800266a:	f7ff f952 	bl	8001912 <LL_RCC_MSI_IsEnabledRangeSelect>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x7a>
 8002674:	f7ff f95d 	bl	8001932 <LL_RCC_MSI_GetRange>
 8002678:	4603      	mov	r3, r0
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	e005      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x86>
 8002682:	f7ff f961 	bl	8001948 <LL_RCC_MSI_GetRangeAfterStandby>
 8002686:	4603      	mov	r3, r0
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4a2b      	ldr	r2, [pc, #172]	; (800273c <HAL_RCC_GetSysClockFreq+0x134>)
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d115      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026a0:	e012      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e00c      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d109      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026b4:	f7ff f840 	bl	8001738 <LL_RCC_HSE_IsEnabledDiv2>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e001      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026c6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c8:	f7ff f971 	bl	80019ae <LL_RCC_GetSysClkSource>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d12f      	bne.n	8002732 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80026d2:	f7ff fa58 	bl	8001b86 <LL_RCC_PLL_GetMainSource>
 80026d6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0xde>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d003      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0xe4>
 80026e4:	e00d      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 80026e8:	60fb      	str	r3, [r7, #12]
        break;
 80026ea:	e00d      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026ec:	f7ff f824 	bl	8001738 <LL_RCC_HSE_IsEnabledDiv2>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 80026f8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026fa:	e005      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026fe:	60fb      	str	r3, [r7, #12]
        break;
 8002700:	e002      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	60fb      	str	r3, [r7, #12]
        break;
 8002706:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002708:	f7ff fa1b 	bl	8001b42 <LL_RCC_PLL_GetN>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	fb03 f402 	mul.w	r4, r3, r2
 8002714:	f7ff fa2c 	bl	8001b70 <LL_RCC_PLL_GetDivider>
 8002718:	4603      	mov	r3, r0
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	3301      	adds	r3, #1
 800271e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002722:	f7ff fa1a 	bl	8001b5a <LL_RCC_PLL_GetR>
 8002726:	4603      	mov	r3, r0
 8002728:	0f5b      	lsrs	r3, r3, #29
 800272a:	3301      	adds	r3, #1
 800272c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002730:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002732:	697b      	ldr	r3, [r7, #20]
}
 8002734:	4618      	mov	r0, r3
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	08004948 	.word	0x08004948
 8002740:	00f42400 	.word	0x00f42400
 8002744:	01e84800 	.word	0x01e84800

08002748 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b598      	push	{r3, r4, r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800274c:	f7ff ff5c 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8002750:	4604      	mov	r4, r0
 8002752:	f7ff f99b 	bl	8001a8c <LL_RCC_GetAHBPrescaler>
 8002756:	4603      	mov	r3, r0
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_RCC_GetHCLKFreq+0x24>)
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd98      	pop	{r3, r4, r7, pc}
 800276c:	080048e8 	.word	0x080048e8

08002770 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b598      	push	{r3, r4, r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002774:	f7ff ffe8 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002778:	4604      	mov	r4, r0
 800277a:	f7ff f99f 	bl	8001abc <LL_RCC_GetAPB1Prescaler>
 800277e:	4603      	mov	r3, r0
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	fa24 f303 	lsr.w	r3, r4, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd98      	pop	{r3, r4, r7, pc}
 8002790:	08004928 	.word	0x08004928

08002794 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b598      	push	{r3, r4, r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002798:	f7ff ffd6 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800279c:	4604      	mov	r4, r0
 800279e:	f7ff f998 	bl	8001ad2 <LL_RCC_GetAPB2Prescaler>
 80027a2:	4603      	mov	r3, r0
 80027a4:	0adb      	lsrs	r3, r3, #11
 80027a6:	4a03      	ldr	r2, [pc, #12]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd98      	pop	{r3, r4, r7, pc}
 80027b4:	08004928 	.word	0x08004928

080027b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	4a10      	ldr	r2, [pc, #64]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80027d0:	f7ff f967 	bl	8001aa2 <LL_RCC_GetAHB3Prescaler>
 80027d4:	4603      	mov	r3, r0
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4a09      	ldr	r2, [pc, #36]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0c9c      	lsrs	r4, r3, #18
 80027f4:	f7fe ff5c 	bl	80016b0 <HAL_PWREx_GetVoltageRange>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4619      	mov	r1, r3
 80027fc:	4620      	mov	r0, r4
 80027fe:	f000 f80b 	bl	8002818 <RCC_SetFlashLatency>
 8002802:	4603      	mov	r3, r0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	08004948 	.word	0x08004948
 8002810:	080048e8 	.word	0x080048e8
 8002814:	431bde83 	.word	0x431bde83

08002818 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <RCC_SetFlashLatency+0xf4>)
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800282c:	6018      	str	r0, [r3, #0]
 800282e:	3304      	adds	r3, #4
 8002830:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002832:	4a37      	ldr	r2, [pc, #220]	; (8002910 <RCC_SetFlashLatency+0xf8>)
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800283c:	6018      	str	r0, [r3, #0]
 800283e:	3304      	adds	r3, #4
 8002840:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002842:	4a34      	ldr	r2, [pc, #208]	; (8002914 <RCC_SetFlashLatency+0xfc>)
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	ca07      	ldmia	r2, {r0, r1, r2}
 800284a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002858:	d11b      	bne.n	8002892 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800285a:	2300      	movs	r3, #0
 800285c:	633b      	str	r3, [r7, #48]	; 0x30
 800285e:	e014      	b.n	800288a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	3338      	adds	r3, #56	; 0x38
 8002866:	443b      	add	r3, r7
 8002868:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4293      	cmp	r3, r2
 8002872:	d807      	bhi.n	8002884 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3338      	adds	r3, #56	; 0x38
 800287a:	443b      	add	r3, r7
 800287c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002882:	e021      	b.n	80028c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	3301      	adds	r3, #1
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	2b02      	cmp	r3, #2
 800288e:	d9e7      	bls.n	8002860 <RCC_SetFlashLatency+0x48>
 8002890:	e01a      	b.n	80028c8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002896:	e014      	b.n	80028c2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	3338      	adds	r3, #56	; 0x38
 800289e:	443b      	add	r3, r7
 80028a0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d807      	bhi.n	80028bc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3338      	adds	r3, #56	; 0x38
 80028b2:	443b      	add	r3, r7
 80028b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028ba:	e005      	b.n	80028c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	3301      	adds	r3, #1
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d9e7      	bls.n	8002898 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <RCC_SetFlashLatency+0x100>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 0207 	bic.w	r2, r3, #7
 80028d0:	4911      	ldr	r1, [pc, #68]	; (8002918 <RCC_SetFlashLatency+0x100>)
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80028d8:	f7fe f990 	bl	8000bfc <HAL_GetTick>
 80028dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028de:	e008      	b.n	80028f2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028e0:	f7fe f98c 	bl	8000bfc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e007      	b.n	8002902 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <RCC_SetFlashLatency+0x100>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1ef      	bne.n	80028e0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3738      	adds	r7, #56	; 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	080048cc 	.word	0x080048cc
 8002910:	080048d4 	.word	0x080048d4
 8002914:	080048dc 	.word	0x080048dc
 8002918:	58004000 	.word	0x58004000

0800291c <LL_RCC_LSE_IsReady>:
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b02      	cmp	r3, #2
 800292e:	d101      	bne.n	8002934 <LL_RCC_LSE_IsReady+0x18>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <LL_RCC_LSE_IsReady+0x1a>
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <LL_RCC_SetUSARTClockSource>:
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_RCC_SetI2SClockSource>:
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <LL_RCC_SetLPUARTClockSource>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_SetI2CClockSource>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029da:	43db      	mvns	r3, r3
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_SetLPTIMClockSource>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <LL_RCC_SetRNGClockSource>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_SetADCClockSource>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_SetRTCClockSource>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_GetRTCClockSource>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_ForceBackupDomainReset>:
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002b10:	2300      	movs	r3, #0
 8002b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b14:	2300      	movs	r3, #0
 8002b16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d058      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002b24:	f7fe fda8 	bl	8001678 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b28:	f7fe f868 	bl	8000bfc <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b2e:	e009      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe f864 	bl	8000bfc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	74fb      	strb	r3, [r7, #19]
        break;
 8002b42:	e006      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b44:	4b7b      	ldr	r3, [pc, #492]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d13c      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002b58:	f7ff ffa7 	bl	8002aaa <LL_RCC_GetRTCClockSource>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d00f      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b74:	f7ff ffa5 	bl	8002ac2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b78:	f7ff ffb3 	bl	8002ae2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d014      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe f834 	bl	8000bfc <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe f830 	bl	8000bfc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d902      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	74fb      	strb	r3, [r7, #19]
            break;
 8002bae:	e004      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002bb0:	f7ff feb4 	bl	800291c <LL_RCC_LSE_IsReady>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d1ee      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5b 	bl	8002a80 <LL_RCC_SetRTCClockSource>
 8002bca:	e004      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
 8002bd0:	e001      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fea9 	bl	800293e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fe9e 	bl	800293e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fec0 	bl	8002998 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fee6 	bl	80029fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fedb 	bl	80029fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fed0 	bl	80029fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fea9 	bl	80029c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fe9e 	bl	80029c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fe93 	bl	80029c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d011      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fe5e 	bl	800296e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d107      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fea5 	bl	8002a2c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d011      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fea3 	bl	8002a56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d18:	d107      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002d2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58000400 	.word	0x58000400

08002d38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d068      	beq.n	8002e1c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fd92 	bl	8000888 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002d6e:	22ca      	movs	r2, #202	; 0xca
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002d74:	2253      	movs	r2, #83	; 0x53
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f87d 	bl	8002e78 <RTC_EnterInitMode>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13f      	bne.n	8002e08 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002d8e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d96:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4319      	orrs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	430b      	orrs	r3, r1
 8002dac:	491e      	ldr	r1, [pc, #120]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	491a      	ldr	r1, [pc, #104]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	4914      	ldr	r1, [pc, #80]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f880 	bl	8002ee0 <RTC_ExitInitMode>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10e      	bne.n	8002e08 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a19      	ldr	r1, [r3, #32]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4319      	orrs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	4909      	ldr	r1, [pc, #36]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_RTC_Init+0xf0>)
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40002800 	.word	0x40002800

08002e2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RTC_WaitForSynchro+0x48>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_RTC_WaitForSynchro+0x48>)
 8002e3a:	f023 0320 	bic.w	r3, r3, #32
 8002e3e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002e40:	f7fd fedc 	bl	8000bfc <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002e46:	e009      	b.n	8002e5c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e48:	f7fd fed8 	bl	8000bfc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e56:	d901      	bls.n	8002e5c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e006      	b.n	8002e6a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RTC_WaitForSynchro+0x48>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ef      	beq.n	8002e48 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40002800 	.word	0x40002800

08002e78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <RTC_EnterInitMode+0x64>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d120      	bne.n	8002ed2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <RTC_EnterInitMode+0x64>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a11      	ldr	r2, [pc, #68]	; (8002edc <RTC_EnterInitMode+0x64>)
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8002e9c:	f7fd feae 	bl	8000bfc <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ea2:	e00d      	b.n	8002ec0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ea4:	f7fd feaa 	bl	8000bfc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb2:	d905      	bls.n	8002ec0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <RTC_EnterInitMode+0x64>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <RTC_EnterInitMode+0x5a>
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d1e8      	bne.n	8002ea4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40002800 	.word	0x40002800

08002ee0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff91 	bl	8002e2c <HAL_RTC_WaitForSynchro>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01e      	beq.n	8002f4e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2203      	movs	r2, #3
 8002f14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e017      	b.n	8002f4e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002f24:	f023 0320 	bic.w	r3, r3, #32
 8002f28:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ff7e 	bl	8002e2c <HAL_RTC_WaitForSynchro>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <RTC_ExitInitMode+0x78>)
 8002f48:	f043 0320 	orr.w	r3, r3, #32
 8002f4c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40002800 	.word	0x40002800

08002f5c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e06f      	b.n	8003058 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002f8a:	22ca      	movs	r2, #202	; 0xca
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8e:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002f90:	2253      	movs	r2, #83	; 0x53
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9e:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fe23 	bl	8000bfc <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002fb8:	e014      	b.n	8002fe4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fba:	f7fd fe1f 	bl	8000bfc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc8:	d90c      	bls.n	8002fe4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002fcc:	22ff      	movs	r2, #255	; 0xff
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e039      	b.n	8003058 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0e4      	beq.n	8002fba <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	041a      	lsls	r2, r3, #16
 8002ff4:	491a      	ldr	r1, [pc, #104]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f023 0207 	bic.w	r2, r3, #7
 8003004:	4916      	ldr	r1, [pc, #88]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8003014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003018:	4a12      	ldr	r2, [pc, #72]	; (8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800301a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800301e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003022:	e007      	b.n	8003034 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8003026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302a:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800302c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800303a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800303e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8003042:	22ff      	movs	r2, #255	; 0xff
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40002800 	.word	0x40002800
 8003064:	58000800 	.word	0x58000800

08003068 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800307e:	2204      	movs	r2, #4
 8003080:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f80a 	bl	800309c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40002800 	.word	0x40002800

0800309c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e049      	b.n	8003154 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fd fc0b 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	4619      	mov	r1, r3
 80030ec:	4610      	mov	r0, r2
 80030ee:	f000 f9a7 	bl	8003440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	f241 1311 	movw	r3, #4369	; 0x1111
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <HAL_TIM_Base_Stop_IT+0x48>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	f240 4344 	movw	r3, #1092	; 0x444
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_Base_Stop_IT+0x48>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0202 	mvn.w	r2, #2
 80031e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f904 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8f7 	bl	80033f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f906 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0204 	mvn.w	r2, #4
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8da 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8cd 	bl	80033f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8dc 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b08      	cmp	r3, #8
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0208 	mvn.w	r2, #8
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2204      	movs	r2, #4
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8b0 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8a3 	bl	80033f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8b2 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0210 	mvn.w	r2, #16
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2208      	movs	r2, #8
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f886 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f879 	bl	80033f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f888 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fa28 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8d7 	bl	8003516 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d10e      	bne.n	8003396 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d107      	bne.n	8003396 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800338e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8c9 	bl	8003528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d10e      	bne.n	80033c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f835 	bl	800342c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d10e      	bne.n	80033ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0220 	mvn.w	r2, #32
 80033e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f88b 	bl	8003504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
	...

08003440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <TIM_Base_SetConfig+0xb8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0x20>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d108      	bne.n	8003472 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <TIM_Base_SetConfig+0xb8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0x52>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0x52>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <TIM_Base_SetConfig+0xbc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0x52>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <TIM_Base_SetConfig+0xc0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <TIM_Base_SetConfig+0xb8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0xa0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <TIM_Base_SetConfig+0xbc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0xa0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <TIM_Base_SetConfig+0xc0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d103      	bne.n	80034e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	615a      	str	r2, [r3, #20]
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <LL_RCC_GetUSARTClockSource>:
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003546:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	401a      	ands	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	4313      	orrs	r3, r2
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <LL_RCC_GetLPUARTClockSource>:
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4013      	ands	r3, r2
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e042      	b.n	8003614 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fd f9c1 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2224      	movs	r2, #36	; 0x24
 80035aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fb62 	bl	8003c88 <UART_SetConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fdca 	bl	8004170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fe50 	bl	80042b2 <UART_CheckIdleState>
 8003612:	4603      	mov	r3, r0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0ba      	sub	sp, #232	; 0xe8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003646:	f640 030f 	movw	r3, #2063	; 0x80f
 800364a:	4013      	ands	r3, r2
 800364c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11b      	bne.n	8003690 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d015      	beq.n	8003690 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 82d6 	beq.w	8003c32 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      }
      return;
 800368e:	e2d0      	b.n	8003c32 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 811f 	beq.w	80038d8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800369a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <HAL_UART_IRQHandler+0x2b0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036aa:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <HAL_UART_IRQHandler+0x2b4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8112 	beq.w	80038d8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d011      	beq.n	80036e4 <HAL_UART_IRQHandler+0xc8>
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036da:	f043 0201 	orr.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d011      	beq.n	8003714 <HAL_UART_IRQHandler+0xf8>
 80036f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2202      	movs	r2, #2
 8003702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d011      	beq.n	8003744 <HAL_UART_IRQHandler+0x128>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2204      	movs	r2, #4
 8003732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d017      	beq.n	8003780 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800375c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_UART_IRQHandler+0x2b0>)
 8003762:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003776:	f043 0208 	orr.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <HAL_UART_IRQHandler+0x196>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00c      	beq.n	80037b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 823c 	beq.w	8003c36 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800380a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800380e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04f      	beq.n	80038b6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fe5e 	bl	80044d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d141      	bne.n	80038ae <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800385a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800386e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1d9      	bne.n	800382a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d013      	beq.n	80038a6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003882:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <HAL_UART_IRQHandler+0x2b8>)
 8003884:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fbd2 	bl	8001034 <HAL_DMA_Abort_IT>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d017      	beq.n	80038c6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80038a0:	4610      	mov	r0, r2
 80038a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e00f      	b.n	80038c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9d9 	bl	8003c5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e00b      	b.n	80038c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9d5 	bl	8003c5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	e007      	b.n	80038c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9d1 	bl	8003c5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80038c4:	e1b7      	b.n	8003c36 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c6:	bf00      	nop
    return;
 80038c8:	e1b5      	b.n	8003c36 <HAL_UART_IRQHandler+0x61a>
 80038ca:	bf00      	nop
 80038cc:	10000001 	.word	0x10000001
 80038d0:	04000120 	.word	0x04000120
 80038d4:	080045a3 	.word	0x080045a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f040 814a 	bne.w	8003b76 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8143 	beq.w	8003b76 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80038f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 813c 	beq.w	8003b76 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2210      	movs	r2, #16
 8003904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	f040 80b5 	bne.w	8003a80 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003922:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8187 	beq.w	8003c3a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003936:	429a      	cmp	r2, r3
 8003938:	f080 817f 	bcs.w	8003c3a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 8086 	bne.w	8003a64 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800396c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003986:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800398e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800399a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1da      	bne.n	8003958 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3308      	adds	r3, #8
 80039a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3308      	adds	r3, #8
 80039c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e1      	bne.n	80039a2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e3      	bne.n	80039de <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a34:	f023 0310 	bic.w	r3, r3, #16
 8003a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a46:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e4      	bne.n	8003a24 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fa8a 	bl	8000f78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f8f9 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a7e:	e0dc      	b.n	8003c3a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80ce 	beq.w	8003c3e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8003aa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80c9 	beq.w	8003c3e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e4      	bne.n	8003aac <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	623b      	str	r3, [r7, #32]
   return(result);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e1      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0310 	bic.w	r3, r3, #16
 8003b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	617b      	str	r3, [r7, #20]
   return(result);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e4      	bne.n	8003b32 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f87e 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b74:	e063      	b.n	8003c3e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x584>
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fd43 	bl	8004624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b9e:	e051      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d014      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d03a      	beq.n	8003c42 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
    }
    return;
 8003bd4:	e035      	b.n	8003c42 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x5da>
 8003be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fced 	bl	80045ce <UART_EndTransmit_IT>
    return;
 8003bf4:	e026      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_UART_IRQHandler+0x5fa>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fd1a 	bl	8004648 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c14:	e016      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_UART_IRQHandler+0x628>
 8003c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da0c      	bge.n	8003c44 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fd03 	bl	8004636 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c30:	e008      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
      return;
 8003c32:	bf00      	nop
 8003c34:	e006      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
    return;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
      return;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
      return;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_UART_IRQHandler+0x628>
    return;
 8003c42:	bf00      	nop
  }
}
 8003c44:	37e8      	adds	r7, #232	; 0xe8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop

08003c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
	...

08003c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b08c      	sub	sp, #48	; 0x30
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b94      	ldr	r3, [pc, #592]	; (8003f08 <UART_SetConfig+0x280>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <UART_SetConfig+0x284>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003cfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f023 010f 	bic.w	r1, r3, #15
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7a      	ldr	r2, [pc, #488]	; (8003f10 <UART_SetConfig+0x288>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d127      	bne.n	8003d7c <UART_SetConfig+0xf4>
 8003d2c:	2003      	movs	r0, #3
 8003d2e:	f7ff fc04 	bl	800353a <LL_RCC_GetUSARTClockSource>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d81b      	bhi.n	8003d74 <UART_SetConfig+0xec>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0xbc>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d65 	.word	0x08003d65
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d6d 	.word	0x08003d6d
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5a:	e080      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d62:	e07c      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003d64:	2304      	movs	r3, #4
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6a:	e078      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e074      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003d74:	2310      	movs	r3, #16
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7a:	e070      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a64      	ldr	r2, [pc, #400]	; (8003f14 <UART_SetConfig+0x28c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d138      	bne.n	8003df8 <UART_SetConfig+0x170>
 8003d86:	200c      	movs	r0, #12
 8003d88:	f7ff fbd7 	bl	800353a <LL_RCC_GetUSARTClockSource>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d82c      	bhi.n	8003df0 <UART_SetConfig+0x168>
 8003d96:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x114>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003df1 	.word	0x08003df1
 8003da4:	08003df1 	.word	0x08003df1
 8003da8:	08003df1 	.word	0x08003df1
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df1 	.word	0x08003df1
 8003db8:	08003df1 	.word	0x08003df1
 8003dbc:	08003dd9 	.word	0x08003dd9
 8003dc0:	08003df1 	.word	0x08003df1
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd6:	e042      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dde:	e03e      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003de0:	2304      	movs	r3, #4
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de6:	e03a      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003de8:	2308      	movs	r3, #8
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dee:	e036      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df6:	e032      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a43      	ldr	r2, [pc, #268]	; (8003f0c <UART_SetConfig+0x284>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d12a      	bne.n	8003e58 <UART_SetConfig+0x1d0>
 8003e02:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003e06:	f7ff fbaa 	bl	800355e <LL_RCC_GetLPUARTClockSource>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e10:	d01a      	beq.n	8003e48 <UART_SetConfig+0x1c0>
 8003e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e16:	d81b      	bhi.n	8003e50 <UART_SetConfig+0x1c8>
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d00c      	beq.n	8003e38 <UART_SetConfig+0x1b0>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e22:	d815      	bhi.n	8003e50 <UART_SetConfig+0x1c8>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <UART_SetConfig+0x1a8>
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d008      	beq.n	8003e40 <UART_SetConfig+0x1b8>
 8003e2e:	e00f      	b.n	8003e50 <UART_SetConfig+0x1c8>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3e:	e00e      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003e40:	2304      	movs	r3, #4
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e46:	e00a      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	e006      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003e50:	2310      	movs	r3, #16
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e002      	b.n	8003e5e <UART_SetConfig+0x1d6>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <UART_SetConfig+0x284>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	f040 80a4 	bne.w	8003fb2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d823      	bhi.n	8003eba <UART_SetConfig+0x232>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x1f0>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fc68 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <UART_SetConfig+0x290>)
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fbad 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8137 	beq.w	800413c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <UART_SetConfig+0x294>)
 8003ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d305      	bcc.n	8003efe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d910      	bls.n	8003f20 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f04:	e11a      	b.n	800413c <UART_SetConfig+0x4b4>
 8003f06:	bf00      	nop
 8003f08:	cfff69f3 	.word	0xcfff69f3
 8003f0c:	40008000 	.word	0x40008000
 8003f10:	40013800 	.word	0x40013800
 8003f14:	40004400 	.word	0x40004400
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	08004988 	.word	0x08004988
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	2200      	movs	r2, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	60fa      	str	r2, [r7, #12]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4a8e      	ldr	r2, [pc, #568]	; (8004168 <UART_SetConfig+0x4e0>)
 8003f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2200      	movs	r2, #0
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f42:	f7fc f919 	bl	8000178 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	020b      	lsls	r3, r1, #8
 8003f58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f5c:	0202      	lsls	r2, r0, #8
 8003f5e:	6979      	ldr	r1, [r7, #20]
 8003f60:	6849      	ldr	r1, [r1, #4]
 8003f62:	0849      	lsrs	r1, r1, #1
 8003f64:	2000      	movs	r0, #0
 8003f66:	460c      	mov	r4, r1
 8003f68:	4605      	mov	r5, r0
 8003f6a:	eb12 0804 	adds.w	r8, r2, r4
 8003f6e:	eb43 0905 	adc.w	r9, r3, r5
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	469a      	mov	sl, r3
 8003f7a:	4693      	mov	fp, r2
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	465b      	mov	r3, fp
 8003f80:	4640      	mov	r0, r8
 8003f82:	4649      	mov	r1, r9
 8003f84:	f7fc f8f8 	bl	8000178 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f96:	d308      	bcc.n	8003faa <UART_SetConfig+0x322>
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9e:	d204      	bcs.n	8003faa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	e0c8      	b.n	800413c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fb0:	e0c4      	b.n	800413c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d168      	bne.n	800408e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d828      	bhi.n	8004016 <UART_SetConfig+0x38e>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x344>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08004001 	.word	0x08004001
 8003fd8:	08004017 	.word	0x08004017
 8003fdc:	08004007 	.word	0x08004007
 8003fe0:	08004017 	.word	0x08004017
 8003fe4:	08004017 	.word	0x08004017
 8003fe8:	08004017 	.word	0x08004017
 8003fec:	0800400f 	.word	0x0800400f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7fe fbbe 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff6:	e014      	b.n	8004022 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7fe fbcc 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8003ffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ffe:	e010      	b.n	8004022 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004000:	4b5a      	ldr	r3, [pc, #360]	; (800416c <UART_SetConfig+0x4e4>)
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004004:	e00d      	b.n	8004022 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004006:	f7fe faff 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800400c:	e009      	b.n	8004022 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004014:	e005      	b.n	8004022 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8089 	beq.w	800413c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	4a4e      	ldr	r2, [pc, #312]	; (8004168 <UART_SetConfig+0x4e0>)
 8004030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004034:	461a      	mov	r2, r3
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	fbb3 f3f2 	udiv	r3, r3, r2
 800403c:	005a      	lsls	r2, r3, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	441a      	add	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	b29b      	uxth	r3, r3
 8004050:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d916      	bls.n	8004086 <UART_SetConfig+0x3fe>
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405e:	d212      	bcs.n	8004086 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f023 030f 	bic.w	r3, r3, #15
 8004068:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	b29b      	uxth	r3, r3
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	b29a      	uxth	r2, r3
 8004076:	8bfb      	ldrh	r3, [r7, #30]
 8004078:	4313      	orrs	r3, r2
 800407a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	8bfa      	ldrh	r2, [r7, #30]
 8004082:	60da      	str	r2, [r3, #12]
 8004084:	e05a      	b.n	800413c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800408c:	e056      	b.n	800413c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004092:	2b08      	cmp	r3, #8
 8004094:	d827      	bhi.n	80040e6 <UART_SetConfig+0x45e>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x414>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	080040e7 	.word	0x080040e7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	080040e7 	.word	0x080040e7
 80040b8:	080040e7 	.word	0x080040e7
 80040bc:	080040df 	.word	0x080040df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fe fb56 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80040c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040c6:	e014      	b.n	80040f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7fe fb64 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 80040cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ce:	e010      	b.n	80040f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <UART_SetConfig+0x4e4>)
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040d4:	e00d      	b.n	80040f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7fe fa97 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80040da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040dc:	e009      	b.n	80040f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040e4:	e005      	b.n	80040f2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040f0:	bf00      	nop
    }

    if (pclk != 0U)
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d021      	beq.n	800413c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <UART_SetConfig+0x4e0>)
 80040fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004102:	461a      	mov	r2, r3
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	fbb3 f2f2 	udiv	r2, r3, r2
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	441a      	add	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b0f      	cmp	r3, #15
 8004122:	d908      	bls.n	8004136 <UART_SetConfig+0x4ae>
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d204      	bcs.n	8004136 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	e002      	b.n	800413c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2201      	movs	r2, #1
 8004140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2201      	movs	r2, #1
 8004148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2200      	movs	r2, #0
 8004150:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004158:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800415c:	4618      	mov	r0, r3
 800415e:	3730      	adds	r7, #48	; 0x30
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004166:	bf00      	nop
 8004168:	08004988 	.word	0x08004988
 800416c:	00f42400 	.word	0x00f42400

08004170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01a      	beq.n	8004286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426e:	d10a      	bne.n	8004286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af02      	add	r7, sp, #8
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042c2:	f7fc fc9b 	bl	8000bfc <HAL_GetTick>
 80042c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d10e      	bne.n	80042f4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f82f 	bl	8004348 <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e025      	b.n	8004340 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d10e      	bne.n	8004320 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f819 	bl	8004348 <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00f      	b.n	8004340 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b09c      	sub	sp, #112	; 0x70
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004358:	e0a9      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	f000 80a5 	beq.w	80044ae <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fc fc4a 	bl	8000bfc <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <UART_WaitOnFlagUntilTimeout+0x32>
 8004374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004376:	2b00      	cmp	r3, #0
 8004378:	d140      	bne.n	80043fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800438e:	667b      	str	r3, [r7, #100]	; 0x64
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800439e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e6      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	663b      	str	r3, [r7, #96]	; 0x60
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e069      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d051      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d149      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004422:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3308      	adds	r3, #8
 800445c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	613b      	str	r3, [r7, #16]
   return(result);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	66bb      	str	r3, [r7, #104]	; 0x68
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004476:	623a      	str	r2, [r7, #32]
 8004478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	69f9      	ldr	r1, [r7, #28]
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	61bb      	str	r3, [r7, #24]
   return(result);
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e010      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4013      	ands	r3, r2
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	f43f af46 	beq.w	800435a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3770      	adds	r7, #112	; 0x70
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b095      	sub	sp, #84	; 0x54
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004500:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e6      	bne.n	80044e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	61fb      	str	r3, [r7, #28]
   return(result);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	64bb      	str	r3, [r7, #72]	; 0x48
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e3      	bne.n	8004512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d118      	bne.n	8004584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e6      	bne.n	8004552 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004598:	bf00      	nop
 800459a:	3754      	adds	r7, #84	; 0x54
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff fb4c 	bl	8003c5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	613b      	str	r3, [r7, #16]
   return(result);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e6      	bne.n	80045d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fb18 	bl	8003c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461c:	bf00      	nop
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_UARTEx_DisableFifoMode+0x16>
 800466c:	2302      	movs	r3, #2
 800466e:	e027      	b.n	80046c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800469e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr

080046ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046de:	2302      	movs	r3, #2
 80046e0:	e02d      	b.n	800473e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2224      	movs	r2, #36	; 0x24
 80046ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f850 	bl	80047c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800475a:	2302      	movs	r3, #2
 800475c:	e02d      	b.n	80047ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2224      	movs	r2, #36	; 0x24
 800476a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f812 	bl	80047c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d108      	bne.n	80047e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047e4:	e031      	b.n	800484a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047e6:	2308      	movs	r3, #8
 80047e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047ea:	2308      	movs	r3, #8
 80047ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	0e5b      	lsrs	r3, r3, #25
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	0f5b      	lsrs	r3, r3, #29
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800480e:	7bbb      	ldrb	r3, [r7, #14]
 8004810:	7b3a      	ldrb	r2, [r7, #12]
 8004812:	4910      	ldr	r1, [pc, #64]	; (8004854 <UARTEx_SetNbDataToProcess+0x90>)
 8004814:	5c8a      	ldrb	r2, [r1, r2]
 8004816:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800481a:	7b3a      	ldrb	r2, [r7, #12]
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <UARTEx_SetNbDataToProcess+0x94>)
 800481e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004820:	fb93 f3f2 	sdiv	r3, r3, r2
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	7b7a      	ldrb	r2, [r7, #13]
 8004830:	4908      	ldr	r1, [pc, #32]	; (8004854 <UARTEx_SetNbDataToProcess+0x90>)
 8004832:	5c8a      	ldrb	r2, [r1, r2]
 8004834:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004838:	7b7a      	ldrb	r2, [r7, #13]
 800483a:	4907      	ldr	r1, [pc, #28]	; (8004858 <UARTEx_SetNbDataToProcess+0x94>)
 800483c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800483e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	080049a0 	.word	0x080049a0
 8004858:	080049a8 	.word	0x080049a8

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4d0d      	ldr	r5, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4d0b      	ldr	r5, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 f820 	bl	80048b4 <_init>
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080049b8 	.word	0x080049b8
 8004898:	080049b8 	.word	0x080049b8
 800489c:	080049b8 	.word	0x080049b8
 80048a0:	080049bc 	.word	0x080049bc

080048a4 <memset>:
 80048a4:	4402      	add	r2, r0
 80048a6:	4603      	mov	r3, r0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	f803 1b01 	strb.w	r1, [r3], #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
